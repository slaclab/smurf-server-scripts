#! /usr/bin/env python3

"""
This is the main executable, which just calls docker.
"""

import argparse
import json
import os
import smurf_docker

def get_smurf_dict():
    """
    Return smurf.json as key-value pairs in a dictionary.
    """
    
    main_dict = {}

    json_path = 'smurf.json'

    if not os.path.isfile(json_path):
        print('No JSON found.')
    else:
        with open(json_path) as json_object:
            main_dict = json.loads(json_object.read())

    return main_dict

def get_env():
    """
    Get the user's environment, add to it the keys and values listed
    in the JSON file, smurf.json, and return the environment.
    """
    
    smurf_dict = get_smurf_dict()
    env = os.environ.copy()

    for key in smurf_dict:
        val = smurf_dict[key]
        env[key] = str(val)

    return env

def list_dirs():
    """
    List this directory ignoring some files. Each folder should have a
    docker-compose.yml file with one service in it, and that service should
    have the same name as the folder. This should make starting services
    more convenient.
    """

    ignore = ['__pycache__', '.git', 'setup']
    services = []
    for f in os.listdir('.'):
        if os.path.isdir(f) and not f in ignore:
            services.append(f)

    return services

desc = "Script for interacting with one SMuRF carrier at a time. Each SMuRF carrier typically has one cryocard, and two RF cards associated with it. SLAC documentation: https://confluence.slac.stanford.edu/display/SMuRF/SLAC+microresonator+RF+electronics+home. SO documentation: http://simonsobservatory.wikidot.com"

parser = argparse.ArgumentParser(description=desc)
parser.add_argument('command', choices = ['start', 'stop', 'restart', 'logs', 'attach', 'build'])
parser.add_argument('service', choices = list_dirs())

args = parser.parse_args()
service = args.service

if args.command == 'start':
    smurf_docker.start(service, get_env())

elif args.command == 'stop':
    smurf_docker.stop(service, get_env())

elif args.command == 'restart':
    smurf_docker.restart(service, get_env())

elif args.command == 'attach':
    smurf_docker.attach(service, get_env())

elif args.command == 'logs':
    smurf_docker.logs(service, get_env())

elif args.command == 'build':
    smurf_docker.build(service, get_env())
