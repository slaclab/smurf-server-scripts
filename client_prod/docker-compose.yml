version: '3.7'
  
services:
  client_prod:
    # The production client. You container has the following folders
    # - /usr/local/src/FirmwareLoader
    # - /usr/local/src/IPMC
    # - /usr/local/src/ProgramFPGA
    # - /usr/local/src/epics
    # - /usr/local/src/pysmurf
    # - /usr/local/src/pysmurf_utilities
    # - /usr/local/src/smurftestapps
    # This container has the following commands
    # - amcc_dump_bsi
    # - amcc_bootloader
    # - amcc_mac_adx
    # - amcc_dump
    network_mode: "host"
    user: ${USER}
    environment:
      - location=${PWD}
      - DISPLAY
      - EPICS_CA_AUTO_ADDR_LIST=NO
      - EPICS_CA_ADDR_LIST=127.255.255.255
      - EPICS_CA_MAX_ARRAY_BYTES=80000000
    volumes:
      # Save data to /data typically.
      - /data:/data
      # Use Ctrl-R to go search back in history. Convenient.
      - /home/${USER}/.ipython:/home/${USER}/.ipython
      
    tty: true
    stdin_open: true
    # Load the image from the internet. The server Dockerfile is
    # located in pysmurf/docker/client. The Dockerfile is based off
    # tidair/pysmurf-base and many utilities come from there.
    image: tidair/pysmurf-client:${version}

    # Name this container specific to the slot. While you can use one
    # client for interacting with multiple slots by setting the EPICS
    # prefix, most users like to have one client running for each
    # slot.
    container_name: ${prefix}${slot}
    
    # The client will now run ipython and the startup script
    # /usr/local/src/pysmurf_utilities/pysmurf_startup.
